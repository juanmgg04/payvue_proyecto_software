name: CI - Build and Test

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Lint y formato de código
  lint:
    name: Lint y formato
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Verificar formato
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "El código no está formateado correctamente"
            gofmt -s -l .
            exit 1
          fi

      - name: Instalar golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Ejecutar golangci-lint
        run: golangci-lint run --timeout=5m

  # Job 2: Build y Tests
  build-and-test:
    name: Build y Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Instalar dependencias
        run: |
          go mod download
          go mod verify

      - name: Build Reader
        run: |
          CGO_ENABLED=1 go build -v -o bin/reader ./cmd/reader
        env:
          CGO_ENABLED: 1

      - name: Build Writer
        run: |
          CGO_ENABLED=1 go build -v -o bin/writer ./cmd/writer
        env:
          CGO_ENABLED: 1

      - name: Ejecutar tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          CGO_ENABLED: 1

      - name: Subir cobertura a Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-payvue

      - name: Guardar binarios
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: bin/
          retention-days: 5

  # Job 3: Análisis de seguridad
  security:
    name: Análisis de seguridad
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Ejecutar Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Subir resultados SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # Job 4: Build de imágenes Docker
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login a Docker Hub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extraer metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/payvue
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build y Push imagen Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Notificación de estado
  notify:
    name: Notificar resultado
    runs-on: ubuntu-latest
    needs: [lint, build-and-test, security, docker]
    if: always()
    steps:
      - name: Verificar estado del workflow
        run: |
          if [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.build-and-test.result }}" == "failure" ] || \
             [ "${{ needs.security.result }}" == "failure" ] || \
             [ "${{ needs.docker.result }}" == "failure" ]; then
            echo "❌ Uno o más jobs fallaron"
            exit 1
          else
            echo "✅ Todos los jobs completados exitosamente"
          fi

