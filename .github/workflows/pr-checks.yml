name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Validaci√≥n de t√≠tulo del PR
  pr-title:
    name: Validar t√≠tulo del PR
    runs-on: ubuntu-latest
    steps:
      - name: Verificar conventional commit
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false

  # Validaci√≥n de tama√±o del PR
  pr-size:
    name: Verificar tama√±o del PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verificar n√∫mero de archivos cambiados
        run: |
          FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
          echo "Archivos cambiados: $FILES_CHANGED"
          
          if [ $FILES_CHANGED -gt 30 ]; then
            echo "‚ö†Ô∏è El PR tiene m√°s de 30 archivos cambiados ($FILES_CHANGED)"
            echo "Considera dividir este PR en PRs m√°s peque√±os"
          fi

      - name: Verificar l√≠neas cambiadas
        run: |
          LINES_CHANGED=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || echo 0)
          echo "L√≠neas cambiadas: $LINES_CHANGED"
          
          if [ $LINES_CHANGED -gt 500 ]; then
            echo "‚ö†Ô∏è El PR tiene m√°s de 500 l√≠neas cambiadas ($LINES_CHANGED)"
            echo "Considera dividir este PR en PRs m√°s peque√±os"
          fi

  # Verificar que no hay conflictos
  no-conflicts:
    name: Verificar conflictos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verificar conflictos de merge
        run: |
          git fetch origin ${{ github.base_ref }}
          if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q '<<<<<<<'; then
            echo "‚ùå El PR tiene conflictos de merge"
            exit 1
          else
            echo "‚úÖ No hay conflictos de merge"
          fi

  # Verificar que no hay TODOs nuevos
  no-todos:
    name: Verificar TODOs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verificar TODOs nuevos
        run: |
          git fetch origin ${{ github.base_ref }}
          NEW_TODOS=$(git diff origin/${{ github.base_ref }}...HEAD | grep -i "^+.*TODO" | wc -l)
          
          if [ $NEW_TODOS -gt 0 ]; then
            echo "‚ö†Ô∏è Se encontraron $NEW_TODOS TODOs nuevos:"
            git diff origin/${{ github.base_ref }}...HEAD | grep -i "^+.*TODO"
            echo ""
            echo "Considera resolver estos TODOs antes de hacer merge"
          else
            echo "‚úÖ No se encontraron TODOs nuevos"
          fi

  # Verificar dependencias
  dependencies:
    name: Verificar dependencias
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Verificar go.mod y go.sum
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "‚ùå go.mod o go.sum no est√°n sincronizados"
            echo "Ejecuta 'go mod tidy' y haz commit de los cambios"
            git diff go.mod go.sum
            exit 1
          else
            echo "‚úÖ go.mod y go.sum est√°n sincronizados"
          fi

      - name: Verificar vulnerabilidades
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Comentar en el PR con el resumen
  comment:
    name: Comentar resumen
    runs-on: ubuntu-latest
    needs: [pr-title, pr-size, no-conflicts, no-todos, dependencies]
    if: always()
    steps:
      - name: Crear comentario de resumen
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'T√≠tulo del PR': '${{ needs.pr-title.result }}',
              'Tama√±o del PR': '${{ needs.pr-size.result }}',
              'Conflictos': '${{ needs.no-conflicts.result }}',
              'TODOs': '${{ needs.no-todos.result }}',
              'Dependencias': '${{ needs.dependencies.result }}'
            };
            
            let comment = '## üîç Resumen de validaciones del PR\n\n';
            
            for (const [check, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
              comment += `${emoji} **${check}**: ${result}\n`;
            }
            
            comment += '\n---\n';
            comment += '*Este comentario fue generado autom√°ticamente por CI*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

