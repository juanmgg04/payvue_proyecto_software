name: CD - Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente a desplegar'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  # Job 1: Deploy a Staging (automÃ¡tico en push a main)
  deploy-staging:
    name: Deploy a Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.payvue.com
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy a servidor staging
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'ENDSSH'
            cd /opt/payvue
            git pull origin main
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f
          ENDSSH

      - name: Verificar salud de la aplicaciÃ³n
        run: |
          sleep 10
          curl -f https://staging.payvue.com/health || exit 1

      - name: Notificar despliegue exitoso
        run: |
          echo "âœ… Despliegue a staging completado"

  # Job 2: Deploy a Production (manual o por tags)
  deploy-production:
    name: Deploy a Production
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://payvue.com
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Extraer versiÃ³n
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Desplegando versiÃ³n: $VERSION"

      - name: Crear backup de base de datos
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/payvue
            mkdir -p backups
            cp data/payvue.db backups/payvue_backup_$(date +%Y%m%d_%H%M%S).db
            ls -lt backups/ | head -6

      - name: Deploy a producciÃ³n
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/payvue
            git fetch --all --tags
            git checkout ${{ steps.version.outputs.version }}
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f

      - name: Verificar salud de la aplicaciÃ³n
        run: |
          echo "Esperando que la aplicaciÃ³n inicie..."
          sleep 15
          
          # Verificar Reader
          curl -f https://payvue.com/api/v1/health || exit 1
          
          # Verificar Writer
          curl -f https://payvue.com:8081/api/v1/health || exit 1

      - name: Rollback en caso de fallo
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/payvue
            git checkout main
            docker-compose up -d --force-recreate

      - name: Crear GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Notificar despliegue exitoso
        run: |
          echo "ðŸš€ Despliegue a producciÃ³n completado"
          echo "VersiÃ³n: ${{ steps.version.outputs.version }}"

  # Job 3: Smoke Tests post-deploy
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Ejecutar smoke tests
        run: |
          echo "ðŸ§ª Ejecutando smoke tests..."
          
          # Test Reader endpoints
          curl -f https://payvue.com/api/v1/debts
          curl -f https://payvue.com/api/v1/incomes
          curl -f https://payvue.com/api/v1/payments
          
          echo "âœ… Smoke tests completados"

